// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // set output writeM
    And(a = instruction[15], b = instruction[3], out = writeM);

    // set output addressM and define A
    Not(in = instruction[15], out = writeA);
    And(a = instruction[15], b = instruction[5], out = savetoA);
    Or(a = writeA, b = savetoA, out = loadA);
    Mux16(a = instruction, b = ALUres, sel = savetoA, out = inA);
    ARegister(in = inA, load = loadA, out = A, out[0..14] = addressM);

    // define D
    And(a = instruction[15], b = instruction[4], out = savetoD);
    DRegister(in = ALUres, load = savetoD, out = D);

    // define ALU input and output
    Mux16(a = A, b = inM, sel = instruction[12], out = y);
    And(a = instruction[15], b = instruction[11], out = zx);
    And(a = instruction[15], b = instruction[10], out = nx);
    And(a = instruction[15], b = instruction[9], out = zy);
    And(a = instruction[15], b = instruction[8], out = ny);
    And(a = instruction[15], b = instruction[7], out = f);
    And(a = instruction[15], b = instruction[6], out = no);
    ALU(x = D, y = y,
        zx = zx,
        nx = nx,
        zy = zy,
        ny = ny,
        f = f,
        no = no,
        out = ALUres, out = outM, zr = EQ, ng = LT);

    // define judge status
    Not(in = EQ, out = NE);
    Not(in = LT, out = GE);
    Or(a = LT, b = EQ, out = LE);
    Not(in = LE, out = GT);

    // define jump status
    And(a = instruction[2], b = instruction[0], out = jne);
    And(a = instruction[15], b = jne, out = JNE);
    And(a = instruction[2], b = instruction[1], out = jle);
    And(a = instruction[15], b = jle, out = JLE);
    And(a = instruction[1], b = instruction[0], out = jge);
    And(a = instruction[15], b = jge, out = JGE);

    // define jump flag
    And(a = instruction[15], b = instruction[0], out = JGT);
    And(a = instruction[15], b = instruction[1], out = JEQ);
    And(a = instruction[15], b = instruction[2], out = JLT);
    And(a = JGT, b = GT, out = JGTflag);
    And(a = JEQ, b = EQ, out = JEQflag);
    And(a = JLT, b = LT, out = JLTflag);
    And(a = JGE, b = GE, out = JGEflag);
    And(a = JLE, b = LE, out = JLEflag);
    And(a = JNE, b = NE, out = JNEflag);
    And(a = JLT, b = JGT, out = JGL);
    And(a = JGL, b = JEQ, out = JMP);
    Or8Way(in[0] = JGTflag,
           in[1] = JEQflag,
           in[2] = JLTflag,
           in[3] = JGEflag,
           in[4] = JLEflag,
           in[5] = JNEflag,
           in[6] = JMP,
           in[7] = false,
           out = JMPflag);
    
    // set output pc
    Not(in = reset, out = incflag);
    PC(in = A, load = JMPflag, inc = incflag, reset = reset, out[0..14] = pc);
}